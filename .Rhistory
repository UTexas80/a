library(dplyr)
library(flextable)
library(kableExtra)
library(officer)
knitr::opts_chunk$set(echo = FALSE)
options(tinytex.verbose = TRUE)
dt04_profit_total <- setDT(data.table(readRDS(here::here("/rds", "dt04_profit_total.rds"))))
knitr::include_graphics(here::here('images/duke.png'))
ft_profit_total <- flextable(dt02_profit_total
) %>%
set_header_labels(
item               = "Item Name",
profit             = "Profit",
units              = "Count",
profit_per_unit    = "Profit Per Unit"
) %>%
colformat_num(
j                  = c(2,4),
big.mark           = ",",
digits             = 2,
na_str             = "",
prefix             = "$"
)  %>%
fit_to_width(max_width = 8.50) %>%
set_caption("")
library(data.table)
library(dplyr)
library(flextable)
library(kableExtra)
library(officer)
knitr::opts_chunk$set(echo = FALSE)
options(tinytex.verbose = TRUE)
dt04_profit_total <- setDT(data.table(readRDS(here::here("/rds", "dt04_profit_total.rds"))))
knitr::include_graphics(here::here('images/duke.png'))
ft_profit_total <- flextable(dt04_profit_total
) %>%
set_header_labels(
item               = "Item Name",
profit             = "Profit",
units              = "Count",
profit_per_unit    = "Profit Per Unit"
) %>%
colformat_num(
j                  = c(2,4),
big.mark           = ",",
digits             = 2,
na_str             = "",
prefix             = "$"
)  %>%
fit_to_width(max_width = 8.50) %>%
set_caption("")
ft_profit_total
knitr::include_graphics(here::here('png/p04b1_bar.png'))
knitr::include_graphics(here::here('png/p04b2_bar.png'))
p04b2_bar <-  plot_ly(dt04_profit_total,
x         = ~item,
y         = ~profit_per_unit,
marker    = list(color = '#012169'),
name      = 'Item Count',
type      = 'bar') %>%
layout( title     = "ABC Company - Item Profitability Per Unit",
xaxis     = list(
title   = "Item Name",
tickangle = -45),
yaxis     = list(
title   = "Profit Per Unit",
tickformat = "$,"))
plotly::plotly_IMAGE(p04b2_bar,
format = "png",
scale = 1,
out_file = here::here("/png", "p04b2_bar.png"))
ft_profit_total <- flextable(dt04_profit_total
) %>%
set_header_labels(
item               = "Item Name",
profit             = "Profit",
units              = "Count",
profit_per_unit    = "Profit Per Unit"
) %>%
colformat_num(
j                  = c(2,4),
big.mark           = ",",
digits             = 2,
na_str             = "",
prefix             = "$"
)  %>%
fit_to_width(max_width = 8.50) %>%
set_caption("")
ft_profit_total
ft_profit_total <- flextable(dt04_profit_total
) %>%
set_header_labels(
item               = "Item Name",
profit             = "Profit",
units              = "Count",
profit_per_unit    = "Profit Per Unit"
) %>%
colformat_num(
j                  = c(2,4),
big.mark           = ",",
digits             = 2,
na_str             = "",
prefix             = "$"
)  %>%
fit_to_width(max_width = 8.50) %>%
set_caption("")
flextable::theme_booktabs(ft_profit_total)
ft_profit_total <- flextable(dt04_profit_total
) %>%
set_header_labels(
item               = "Item Name",
profit             = "Profit",
units              = "Count",
profit_per_unit    = "Profit Per Unit"
) %>%
colformat_num(
j                  = c(2,4),
big.mark           = ",",
digits             = 2,
na_str             = "",
prefix             = "$"
)  %>%
fit_to_width(max_width = 8.50) %>%
set_caption("")
flextable::theme_zebra(ft_profit_total)
ft_profit_total <- flextable(dt04_profit_total
) %>%
set_header_labels(
item               = "Item Name",
profit             = "Profit",
units              = "Count",
profit_per_unit    = "Profit Per Unit"
) %>%
colformat_num(
j                  = c(2,4),
big.mark           = ",",
digits             = 2,
na_str             = "",
prefix             = "$"
)  %>%
fit_to_width(max_width = 8.50) %>%
autofit(
)  %>%
set_caption("")
flextable::theme_zebra(ft_profit_total)
ft_profit_total <- flextable(dt04_profit_total
) %>%
set_header_labels(
item               = "Item Name",
profit             = "Profit",
units              = "Count",
profit_per_unit    = "Profit Per Unit"
) %>%
colformat_num(
j                  = c(2,4),
big.mark           = ",",
digits             = 0,
na_str             = "",
prefix             = "$"
)  %>%
fit_to_width(max_width = 8.50) %>%
autofit(
)  %>%
set_caption("")
flextable::theme_zebra(ft_profit_total)
knitr::include_graphics(here::here('png/p04b2_bar.png'))
knitr::include_graphics(here::here('png/p04b1_bar.png'))
source('~/Documents/GitHub/abc/abc.r')
knitr::opts_chunk$set(echo = TRUE)
source(here::here("/lib", "render_toc.R"))
source('~/Documents/GitHub/abc/abc.r')
knitr::opts_chunk$set(echo = TRUE)
render_toc("01-items.Rmd")
render_toc("02-profit.Rmd")
# automatically create a bib database for R packages
knitr::write_bib(c(
.packages(), 'bookdown', 'knitr', 'rmarkdown'
), 'packages.bib')
source('~/Documents/GitHub/abc/abc.r')
################################################################################
## Step 99.03: Processing                                                    ###
################################################################################
# rmarkdown::run("./dashboard/Flexdashboard.Rmd")
bookdown::render_book("01-intro.Rmd", output_format = "bookdown::pdf_document2")
################################################################################
## Step 99.03: Processing                                                    ###
################################################################################
# rmarkdown::run("./dashboard/Flexdashboard.Rmd")
bookdown::render_book("01-intro.Rmd", output_format = "bookdown::pdf_document2")
unlink('index_cache', recursive = TRUE)
source("~/github/a/abc.r", echo=TRUE)
ProjectTemplate::migrate.project()
addinslist:::addinslistAddin()
getwd()
setwd(getwd())
source("~/github/a/abc.r", echo=TRUE)
addinslist:::addinslistAddin()
devtools::install_github('stla/bracketify')
renv::init(bare = TRUE)
renv::activate()
source("~/github/a/abc.r", echo=TRUE)
if (!require(devtools)) install.packages("devtools")
devtools::install_github("r-lib/devtools")
devtools::install_github('KentonWhite/ProjectTemplate')
source("~/github/a/abc.r", echo=TRUE)
devtools::install_github('stla/bracketify')
devtools::install_github("bergant/datamodelr")
source("~/github/a/abc.r", echo=TRUE)
devtools::install_github("R-CoderDotCom/ggdogs")
source("~/github/a/abc.r", echo=TRUE)
devtools::install_github('Mikata-Project/ggthemr')
source("~/github/a/abc.r", echo=TRUE)
devtools::install_github("gadenbuie/grkstyle")
source("~/github/a/abc.r", echo=TRUE)
remotes::install_github("arcruz0/inexact")
View(config)
source("~/github/a/abc.r", echo=TRUE)
View(config)
remotes::install_github("arcruz0/inexact")
options(repos = c(
yihui = 'https://yihui.r-universe.dev',
CRAN = 'https://cloud.r-project.org'
))
install.packages('knitr')
source("~/github/a/abc.r", echo=TRUE)
devtools::install_github("pzhaonet/bookdownplus")
renv::snapshot()
source("~/github/a/abc.r", echo=TRUE)
install_github('ramnathv/rCharts')
devtools::install_github("jiho/autoplot")
devtools::install_github("b-rodrigues/loud")
# good packages to install for this to work smoothly:
install.packages(c("Rcpp","ggplot2","munsell","htmltools","DBI","assertthat",
"gridExtra","digest","fpc","TSP","registry","gclus","gplots","RColorBrewer",
"stringr","labeling","yaml"))
# You'll need devtools
install.packages.2 <- function (pkg) if (!require(pkg)) install.packages(pkg);
install.packages.2('devtools')
# make sure you have Rtools installed first! if not, then run:
#install.packages('installr'); install.Rtools()
devtools::install_github("ropensci/plotly") # you will probably benefit from the latest version of plotly
devtools::install_github('talgalili/heatmaply')
devtools::install_github('daattali/addinslist')
devtools::install_github("BAAQMD/copydat")
devtools::install_github("ChrisDienes/SeaClass")
devtools::install_github("LudvigOlsen/insertImage")
devtools::install_github("LudvigOlsen/splitChunk")
devtools::install_github("MilesMcBain/datapasta")
devtools::install_github("RhoInc/CRANsearcher")
devtools::install_github("Stan125/GREA")
devtools::install_github("Stan125/limoaddin")
devtools::install_github("ThinkR-open/littleboxes")
devtools::install_github("YvesCR/arimaUI")
devtools::install_github("alan-y/objectremover")
devtools::install_github("benmarwick/snakecaser")
devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
devtools::install_github("bnosac/taskscheduleR")
devtools::install_github("calligross/ggthemeassist")
devtools::install_github("crsh/citr")
devtools::install_github("csgillespie/addinmanager")
devtools::install_github("daattali/addinslist")
devtools::install_github("daattali/ggExtra")
devtools::install_github("daranzolin/ViewPipeSteps")
devtools::install_github("daranzolin/compareAreas")
addinslist:::addinslistAddin()
source("~/github/a/volatility.r", echo=TRUE)
renv::history()
renv::status()
renv::upgrade(version = "0.16.0")
install.packages("RCurl")
renv::status()
renv::clean()
renv::status()
source("~/github/a/volatility.r", echo=TRUE)
renv::status()
remotes::install_github("tidyverts/fable")
install.packages("remotes")
remotes::install_github("tidyverts/fable")
if (!requireNamespace("remotes"))
install.packages("remotes")
remotes::install_github("tidyverts/fable")
install.Rtools()
source("~/github/a/volatility.r", echo=TRUE)
if (!require("remotes")) install.packages("remotes")
remotes::install_github('sinhrks/ggfortify')
install.packages("ggplot2")
if (!require("remotes")) install.packages("remotes")
remotes::install_github('sinhrks/ggfortify')
devtools::install_github("gagolews/stringi")
library(devtools)
if (!require(devtools)) install.packages("devtools")
devtools::install_github("r-lib/devtools")
devtools::install_github("gagolews/stringi")
library(devtools)
devtools::install_github("gagolews/stringi")
renv::status()
renv::snapshot()
renv::status()
renv::diagnostics()
renv::snapshot()
source("~/github/a/volatility.r", echo=TRUE)
install_github("braverock/blotter")
install.packages("FinancialInstrument")
devtools::install_github("braverock/quantstrat", force = TRUE )
devtools::install_github("business-science/tidyquant")
renv::status()
source("~/github/a/volatility.r", echo=TRUE)
devtools::install_github("bergant/datamodelr")
source("~/github/a/volatility.r", echo=TRUE)
# install.packages("remotes")
remotes::install_github("tidyverts/fable")
source("~/github/a/volatility.r", echo=TRUE)
devtools::install_github(c("ramnathv/htmlwidgets", "rstudio/dygraphs"))
remotes::install_github("matt-dray/blogsnip")
source("~/github/a/volatility.r", echo=TRUE)
devtools::install_github('stla/bracketify')
renv::snapshot()
source("~/github/a/volatility.r", echo=TRUE)
devtools::install_github('Mikata-Project/ggthemr')
devtools::install_github('IndrajeetPatil/ggstatsplot')
renv::snapshot()
y
install.packages("renv", repos = "https://rstudio.r-universe.dev")
source("~/github/a/volatility.r", echo=TRUE)
devtools::install_github("aryoda/tryCatchLog", ref = "v1.1.7")
devtools::install_github("cvitolo/r_treemap", subdir = "treeMap")
devtools::install_github("Swechhya/excelR")
# -----------------------------------------------------------------------------
remotes::install_github("arcruz0/inexact")
remotes::install_github("ashenoy-cmbi/grafify@*release", dependencies = T)
remotes::install_github("dreamRs/esquisse")
remotes::install_github('rstudio/flexdashboard')
remotes::install_github("HenrikBengtsson/R.utils@develop")
remotes::install_github("joshuaulrich/xts")
remotes::install_github("jbkunst/highcharter")
renv::record("rstudio/renv@0.16.0-15")
renv::status()
renv::snapshot()
remotes::install_github("jbkunst/highcharter")
library(devtools)
devtools::install_github('gagolews/stringi')
install.packages("stringi")
install.packages("htmltools")
remotes::install_github("arcruz0/inexact")
install.packages("stringi")
remotes::install_github("arcruz0/inexact")
library(stringi)
remotes::install_github("arcruz0/inexact")
remotes::install_github("jbkunst/highcharter")
install.packages("waldo")
source("~/github/a/volatility.r", echo=TRUE)
devtools::install_github('deckmyn/maps')
devtools::install_github('adeckmyn/maps')
install.packages("highcharter")
remotes::install_github("arcruz0/inexact")
source("~/github/a/volatility.r", echo=TRUE)
devtools::install_github("jiho/autoplot")
devtools::install_github("jsugarelli/packagefinder")
devtools::install_github("lenkiefer/darklyplot")
install.packages("ggthemes")
devtools::install_github("lenkiefer/darklyplot")
source("~/github/a/volatility.r", echo=TRUE)
rbind(dt.data, dt.output)
renv::status()
devtools::install_github("jennybc/here_here")
library(devtools)
devtools::install_github("jennybc/here_here")
install.packages("here")
renv::status()
getwd()
renv::restore()
renv::status()
install.packages("waldo")
renv::status()
install_github(c("hadley/ggplot2", "jrnold/ggthemes"))
devtools::install_github(c("hadley/ggplot2", "jrnold/ggthemes"))
install.packages("miniUI")
install_github( "jrnold/ggthemes")
devtools::install_github( "jrnold/ggthemes")
install.packages("usethis")
if (!requireNamespace("remotes"))
install.packages("remotes")
install.packages("sessioninfo")
renv::status()
source("~/github/volatility/volatility.r", echo=TRUE)
devtools::install_github("joshuaulrich/TTR")
library(TTR)
glimpse(dt.data)
glimpse(dt.output)
dt.retail <- rbind(dt.data, dt.output)
glimpse(dt.retail)
renv::status()
source("~/github/volatility/volatility.r", echo=TRUE)
glimpse(dt.retail)
remotes::install_github("christophsax/tsbox")
library(tsbox)
tsbox::ts_data.table(dt.zip)
t<--tsbox::ts_data.table(dt.zip)
t<-tsbox::ts_data.table(dt.zip)
class(t)
rm(t)
x.ts <- ts_c(mdeaths, fdeaths)
x.ts
ts_df(x.ts)
x.ts <- ts_c(mdeaths, fdeaths)
x.ts
ts_df(x.ts)
mdeaths
rm(x.ts)
data.table::as.xts.data.table(dt.zip)
class(data.table::as.xts.data.table(dt.zip))
z<-data.table::as.xts.data.table(dt.zip)
z
TTR::EMA(dt.zip[,"Retail.Average"], n=20)
TTR::EMA(dt.zip[,"Retail.Average"], n=50)
TTR::ROC(z[,"Retail.Average"])
data(ttrc)
glimpse(ttrc)
data(edhec)
glimpse(edhec)
View(edhec)
R=edhec[,"Funds of Funds",drop=FALSE]
R
Return.cumulative = cumprod(1+R) - 1
Return.cumulative
chart.TimeSeries(TTR::ROC(z[,"Retail.Average"]))
R
z
Return.cumulative
cumprod[z$Retail.Average]
class(R)
S<-z[,"Retail.Average",drop=FALSE]
Return.sumulative = cumprod(1+S) - 1
chart.TimeSeries(Return.sumulative)
R
S
TTR::ROC(z[,"Retail.Average"])
Return.sumulative = cumprod(1 + TTR::ROC(z[,"Retail.Average"])) - 1
Return.sumulative
Return.sumulative = 1 + TTR::ROC(z[,"Retail.Average"])
Return.sumulative
Return.sumulative = 1 + (TTR::ROC(z[,"Retail.Average"]))
Return.sumulative
Return.sumulative = 1 + (TTR::ROC(z[,"Retail.Average"])) - 1
Return.sumulative
chart.TimeSeries(Return.sumulative)
cumprod(z$Retail.Average)
TTR::ROC(z[,"Retail.Average"])
View(z)
TTR::ROC(z[Mailing.Zip == '8723',"Retail.Average"])
glimpse(z)
z
z[Mailing.Zip == '8723']
z[Mailing.Zip == 8723,]
z
z<-data.table::as.xts.data.table(dt.zip[Mailing.Zip == '8723',])
Return.sumulative = 1 + (TTR::ROC(z[,"Retail.Average"])) - 1
chart.TimeSeries(Return.sumulative)
as.xts(dt.zip[Mailing.Zip == '8723',])
a<-as.xts(dt.zip[Mailing.Zip == '8723',])
a
Return.sumulative = 1 + (TTR::ROC(a[,"Retail.Average"])) - 1
Return.sumulative
chart.TimeSeries(Return.sumulative)
a
View(a)
FANG %>%
group_by(Mailing.Zip) %>%
plot_time_series(dt_start, Retail.Average, .facet_ncol = 2, .interactive = FALSE)
source("~/github/volatility/volatility.r", echo=TRUE)
View(dt.retail_daily)
glimpse(dt.retail_daily)
chart.TimeSeries(Return.cumulative, colorset = "darkblue",
legend.loc = "bottomright",
period.areas = cycles.dates,
period.color = rgb(204/255, 204/255, 204/255, alpha=0.25),
event.lines = risk.dates,
event.labels = risk.labels,
event.color = "red", lwd = 2)
R=edhec[,"Funds of Funds",drop=FALSE]
Return.cumulative = cumprod(1+R) - 1
chart.TimeSeries(Return.cumulative)
chart.TimeSeries(Return.cumulative, colorset = "darkblue",
legend.loc = "bottomright",
period.areas = cycles.dates,
period.color = rgb(204/255, 204/255, 204/255, alpha=0.25),
event.lines = risk.dates,
event.labels = risk.labels,
event.color = "red", lwd = 2)
Return.cumulative
chart.Bar(edhec[,"Funds of Funds"], main="Monthly Returns")
chart.Histogram(edhec[,'Equity Market Neutral',drop=FALSE])
chart.TimeSeries(ret.cum_8724, colorset = "darkblue")
ret.cum_8724
dx_msa_5190  <- xts::as.xts(dt.retail_daily[id_region == '805190',])
dx_zip_8723  <- xts::as.xts(dt.retail_daily[id_region == '8723',])
dx_zip_8724  <- xts::as.xts(dt.retail_daily[id_region == '8724',])
ret.cum_5190 <- 1 + (TTR::ROC(dx_msa_5190[,"retail_avg"])) - 1
dx_msa_5190
ret.cum_5190 <- 1 + (TTR::ROC(dx_msa_5190[,"retail_average"])) - 1
ret.cum_8723 <- 1 + (TTR::ROC(dx_zip_8723[,"retail_average"])) - 1
ret.cum_8724 <- 1 + (TTR::ROC(dx_zip_8724[,"retail_average"])) - 1
chart.TimeSeries(ret.cum_5190, colorset = "darkblue")
chart.TimeSeries(ret.cum_8723, colorset = "darkblue")
chart.TimeSeries(ret.cum_8724, colorset = "darkblue")
png("monmouth.png")
ggsave("Monmouth.png")
source("~/github/volatility/volatility.r", echo=TRUE)
renv::status()
source("~/github/volatility/volatility.r", echo=TRUE)
remotes::install_github("robjhyndman/forecast")
View(config)
